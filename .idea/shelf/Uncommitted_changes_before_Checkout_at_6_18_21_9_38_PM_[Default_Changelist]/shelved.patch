Index: app/src/main/java/com/example/miapr/Importar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.miapr;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.app.ProgressDialog;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.os.SystemClock;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.android.volley.Request;\nimport com.android.volley.RequestQueue;\nimport com.android.volley.Response;\nimport com.android.volley.VolleyError;\nimport com.android.volley.toolbox.StringRequest;\nimport com.android.volley.toolbox.Volley;\n\npublic class Importar extends AppCompatActivity {\n\n    Button btImportar, btImportar2;\n    EditText etUrl;\n    private ProgressDialog progress;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_importar);\n        btImportar2 = findViewById(R.id.btImportar2);\n        btImportar = findViewById(R.id.btImportar);\n        etUrl = (EditText) findViewById(R.id.etUri);\n        btImportar.setEnabled(true);\n        btImportar2.setVisibility(View.INVISIBLE);\n        btImportar2.setEnabled(false);\n        btImportar.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                consulUltId();\n\n            }\n        });\n        /*btImportar2.setOnClickListener(new View.OnClickListener() {\n            public void onClick(View v) {\n                descargaLecturasAnteriores();\n\n            }\n        });*/\n    }\n\n    public void consulUltId() {\n        btImportar.setEnabled(false);\n\n        //Toast.makeText(this,\"Importando datos desde el servidor\",Toast.LENGTH_LONG).show();\n\n\n        String Url = etUrl.getText().toString()+\"/Apr/modelo/consultaID.php\"; //obtiene el la cantidad de registros de medidores en appweb.\n        StringRequest stringRequest = new StringRequest(Request.Method.POST, Url, new Response.Listener<String>() {\n\n            @Override\n            public void onResponse(String response) {\n                conexionUnophp(response);//obtiene los medidores de appweb y los inserta en la appmovil\n            }\n        }, new Response.ErrorListener() {\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();\n            }\n        });\n        RequestQueue requestQueue = Volley.newRequestQueue(this);\n        requestQueue.add(stringRequest);\n\n\n    }\n     public void conexionUnophp(final String id) {\n        final String Url = etUrl.getText().toString()+\"/Apr/modelo/descargarDatos.php\";\n        //Toast.makeText(this, \"Se importarán \"+id+\" registros de medidores\", Toast.LENGTH_LONG).show();\n\n        borrartabla();//borra la tabla de medidores de app movil antes de insertar los nuevos medidores exportados\n\n         final int ide = Integer.parseInt(id);\n         progress=new ProgressDialog(this);\n         progress.setMessage(\"Importando \"+id+\" Medidores...\");\n         progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n         //progress.setIndeterminate(true);\n         progress.setProgress(0);\n         progress.show();\n         progress.setMax(ide);\n         final Thread t = new Thread() {\n             @Override\n             public void run() {\n\n\n                 Integer num = 1;\n                 while (num <= ide ){\n                     progress.setProgress(num);\n                     SystemClock.sleep(500);\n                     StringRequest stringRequest = new StringRequest(Request.Method.POST, Url+\"?var='\"+num+\"'\", new Response.Listener<String>() { //envia el id de la tabla de medidores.\n\n                         @Override\n                         public void onResponse(String response) {\n                             String[] respuesta = response.split(\",\");\n\n                             String numero =respuesta[0];\n                             String marca =respuesta[1];\n                             String id =respuesta[2];\n                             crearTabla(numero,marca, id);\n\n\n\n                         }\n                     }, new Response.ErrorListener() {\n                         @Override\n                         public void onErrorResponse(VolleyError error) {\n                             Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();\n                         }\n                     });\n                     RequestQueue requestQueue = Volley.newRequestQueue(getApplicationContext());\n                     requestQueue.add(stringRequest);\n\n                     num = num + 1;\n                 }\n\n\n                 progress.dismiss();\n                 descargarDatosCobros();\n                 consultaIdCliente();\n\n             }\n         };\n         t.start();\n\n     }\n    public boolean verificarImportaciónMedidores(String id, String numero, String marca){\n        //Consulta en bbdd interna existencia de datos exportados.\n        DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n        databaseAccess.open();\n        String [] datos = databaseAccess.getDatosMedidores(id);\n        //compara datos obtenidos de la consulta con los obtenido de la bbdd externa.\n        if(!datos[0].equals(id) && !datos[1].equals(numero) && !datos[2].equals(marca)){\n            return false;\n        }else{\n            return true;\n        }\n        //si son iguales, conitunar con el bucle.\n        //si son distintos terminar con el bucle y borrar vaciar la tablas correspondientes.\n        //emitir error de inportación de medidores de datos,\n    }\n\n     public void descargaLecturasAnteriores(){\n         btImportar2.setEnabled(false);\n         //Toast.makeText(this, \"Importanto lecturas del mes anterior\", Toast.LENGTH_LONG).show();\n         final DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n         databaseAccess.open();\n\n         String idMedidores = databaseAccess.getIdMedidores();\n         final String[] ListaidMed = idMedidores.split(\",\");\n         Log.i(\"KRA2::\",\"prueba1\");\n         final String Url = etUrl.getText().toString()+\"/Apr/modelo/descargaLecturasAnteriores.php\";\n\n         progress=new ProgressDialog(this);\n         progress.setMessage(\"Importando lecturas del mes anterior...\");\n         progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n         //progress.setIndeterminate(true);\n         progress.setProgress(0);\n         progress.show();\n\n         progress.setMax(ListaidMed.length -1);\n         final Thread t = new Thread() {\n             @Override\n             public void run() {\n\n                 for(int cont=1; cont < ListaidMed.length; cont++){\n\n                     progress.setProgress(cont);\n                     SystemClock.sleep(500);\n\n                     //String num= Integer.toString(cont);\n                     final String numeroMedidor= databaseAccess.getCodigoMedidor(ListaidMed[cont]);\n                     StringRequest stringRequest = new StringRequest(Request.Method.POST, Url+\"?var='\"+numeroMedidor+\"'\", new Response.Listener<String>(){\n                         @Override\n                         public void onResponse(String response) {\n                             Log.i(\"KRA2::\",response);\n                             Log.i(\"KRA::\",\"prueba2\");\n\n\n                             if(response.equals(\"\")){\n                                 String lectura =\"0\";\n                                 String medidor =numeroMedidor;\n                                 Log.i(\"KRA-??:\", \"si\");\n                                 DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n                                 databaseAccess.open();\n                                 databaseAccess.insertarRegistros(lectura, medidor);\n                                 //Consulta en bbdd interna existencia de datos exportados.\n                                 //compara datos obtenidos de la consulta con los obtenido de la bbdd externa.\n                                 //si son iguales, conitunar con el bucle.\n                                 //si son distintos terminar con el bucle y borrar vaciar la tablas correspondientes.\n                                 //emitir error de inportación de medidores de datos,\n                             }else{\n                                 String[] respuesta = response.split(\",\");\n                                 String lectura =respuesta[0];\n                                 String medidor =respuesta[1];\n                                 DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n                                 databaseAccess.open();\n                                 databaseAccess.insertarRegistros(lectura, medidor);\n                                 //Consulta en bbdd interna existencia de datos exportados.\n                                 //compara datos obtenidos de la consulta con los obtenido de la bbdd externa.\n                                 //si son iguales, conitunar con el bucle.\n                                 //si son distintos terminar con el bucle y borrar vaciar la tablas correspondientes.\n                                 //emitir error de inportación de lecturas de datos,\n                             }\n\n                         }\n                     }, new Response.ErrorListener() {\n                         @Override\n                         public void onErrorResponse(VolleyError error) {\n                             Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();\n                         }\n                     });\n                     RequestQueue requestQueue = Volley.newRequestQueue(getApplicationContext());\n                     requestQueue.add(stringRequest);\n                 }\n                 progress.dismiss();\n                 new Handler(Looper.getMainLooper()).post(new Runnable() {\n                     @Override\n                     public void run() {\n                         Toast.makeText(getApplicationContext(), \"Se importaron \"+(ListaidMed.length-1)+\" clientes juntos con sus medidores asociados.\", Toast.LENGTH_LONG).show();\n\n                     }\n                 });\n             }\n         };\n         t.start();\n\n     }\n\n     private void descargarDatosCobros(){\n         String Url = etUrl.getText().toString()+\"/Apr/modelo/descargarDatosCobros.php\";\n         StringRequest stringRequest = new StringRequest(Request.Method.POST, Url, new Response.Listener<String>(){\n             @Override\n             public void onResponse(String response) {\n\n                 //Toast.makeText(getApplicationContext(), \"Respuesta datos cobros::-\"+response, Toast.LENGTH_SHORT).show();\n\n                 String[] respuesta = response.split(\",\");\n\n                 String cargoFijo =respuesta[0];\n                 String metrosSubsidio =respuesta[1];\n                 String valorMetro =respuesta[2];\n\n                 DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n                 databaseAccess.open();\n\n                 databaseAccess.insertarDatosCobros(cargoFijo, metrosSubsidio, valorMetro);\n\n             }\n         }, new Response.ErrorListener() {\n             @Override\n             public void onErrorResponse(VolleyError error) {\n                 Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();\n             }\n         });\n         RequestQueue requestQueue = Volley.newRequestQueue(this);\n         requestQueue.add(stringRequest);\n     }\n     private void descargarCliente(final int ultimoId){\n\n        final String Url = etUrl.getText().toString()+\"/Apr/modelo/descargaClientes.php\";\n\n         progress=new ProgressDialog(this);\n         progress.setMessage(\"Importando Clientes...\");\n         progress.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n         //progress.setIndeterminate(true);\n         progress.setProgress(0);\n         progress.show();\n\n         progress.setMax(ultimoId);\n         final Thread t = new Thread() {\n             @Override\n             public void run() {\n\n                 int contador = 1;\n                 while (contador <= ultimoId){\n                     progress.setProgress(contador);\n                     SystemClock.sleep(500);\n\n                     String var= String.valueOf(contador);\n                     StringRequest stringRequest = new StringRequest(Request.Method.POST, Url+\"?var='\"+var+\"'\", new Response.Listener<String>() {\n\n                         @Override\n                         public void onResponse(String response) {\n                             // Toast.makeText(getApplicationContext(), \"respuesta: \"+response, Toast.LENGTH_SHORT ).show();\n                             Log.i(\"kra-rut\", \"prueba\");\n                             String[] respuesta = response.split(\",\");\n                             String rut =respuesta[0];\n                             String nombre =respuesta[1];\n                             String apellido =respuesta[2];\n                             String direccion =respuesta[3];\n                             String subsidio =respuesta[4];\n                             Log.i(\"kra-rut\", rut);\n                             Log.i(\"kra-subsidio\", subsidio);\n\n                             String numSitio =respuesta[5];\n                             String idMedidor =respuesta[6];\n\n                             DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n                             databaseAccess.open();\n                             databaseAccess.insertarClientes(rut, nombre, apellido, direccion, subsidio, numSitio, idMedidor);\n\n                             //Consulta en bbdd interna existencia de datos exportados.\n                             //compara datos obtenidos de la consulta con los obtenido de la bbdd externa.\n                             //si son iguales, conitunar con el bucle.\n                             //si son distintos terminar con el bucle y borrar vaciar la tablas correspondientes.\n                             //emitir error de inportación de clientes de datos,\n                         }\n                     }, new Response.ErrorListener() {\n                         @Override\n                         public void onErrorResponse(VolleyError error) {\n                             Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();\n                         }\n                     });\n                     RequestQueue requestQueue = Volley.newRequestQueue(getApplicationContext());\n                     requestQueue.add(stringRequest);\n\n                     contador++;\n                 }\n                 progress.dismiss();\n\n                 new Handler(Looper.getMainLooper()).post(new Runnable() {\n                     @Override\n                     public void run() {\n                         //btImportar2.setEnabled(true);\n                        // btImportar2.setVisibility(View.VISIBLE);\n                         descargaLecturasAnteriores();\n\n                     }\n                 });\n\n\n             }\n\n         };\n\n         t.start();\n     }\n\n     private void consultaIdCliente(){\n         String Url = etUrl.getText().toString()+\"/Apr/modelo/consultaIdClientes.php\"; //obtiene el la cantidad de registros de medidores en appweb.\n         StringRequest stringRequest = new StringRequest(Request.Method.POST, Url, new Response.Listener<String>() {\n\n             @Override\n             public void onResponse(String response) {\n                // Toast.makeText(getApplicationContext(), \"respuesta cliente id+++++:::\"+response, Toast.LENGTH_SHORT ).show();\n\n                 int ultimoId = Integer.parseInt(response);\n                 descargarCliente(ultimoId);\n\n             }\n         }, new Response.ErrorListener() {\n             @Override\n             public void onErrorResponse(VolleyError error) {\n                 Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();\n             }\n         });\n         RequestQueue requestQueue = Volley.newRequestQueue(this);\n         requestQueue.add(stringRequest);\n     }\n\n\n    private void borrartabla(){\n        DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n        databaseAccess.open();\n        databaseAccess.VaciarMedidores();\n        databaseAccess.VaciarLecturas();\n        databaseAccess.VaciarDatosCobros();\n        databaseAccess.VaciarClientes();\n\n    }\n    private void crearTabla(String numero, String marca, String id){\n\n        DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n        databaseAccess.open();\n        databaseAccess.insertarMedidoresM(numero,marca, id);\n        databaseAccess.insertarMedidorL(numero);\n\n    }\n\n    public void prueba(){\n        DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());\n        databaseAccess.open();\n        int num=1;\n        while (num <= 7) {\n            String[] registroLecturas = databaseAccess.pruebas(num);\n            Toast.makeText(this, registroLecturas[0]+\"-\"+registroLecturas[1]+\"-\"+registroLecturas[2]+\"-\"+registroLecturas[3]+\"-\"+registroLecturas[4]+\"-\"+registroLecturas[5]+\"-\"+registroLecturas[6], Toast.LENGTH_SHORT).show();\n            //Toast.makeText(this, \"medidor: \"+registroLecturas[0]+\"lectura ant:\"+registroLecturas[1], Toast.LENGTH_SHORT).show();\n            num++;\n        }\n        databaseAccess.close();\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/miapr/Importar.java	(revision f9c51227aeddd9023c7aa1c8cdce19c1b4f779f2)
+++ app/src/main/java/com/example/miapr/Importar.java	(date 1624066703000)
@@ -62,7 +62,7 @@
 
             @Override
             public void onResponse(String response) {
-                conexionUnophp(response);//obtiene los medidores de appweb y los inserta en la appmovil
+                conexionUnophp(response,"0");//obtiene los medidores de appweb y los inserta en la appmovil
             }
         }, new Response.ErrorListener() {
             @Override
@@ -75,7 +75,8 @@
 
 
     }
-     public void conexionUnophp(final String id) {
+     public void conexionUnophp(final String id, String str) {
+
         final String Url = etUrl.getText().toString()+"/Apr/modelo/descargarDatos.php";
         //Toast.makeText(this, "Se importarán "+id+" registros de medidores", Toast.LENGTH_LONG).show();
 
@@ -89,16 +90,18 @@
          progress.setProgress(0);
          progress.show();
          progress.setMax(ide);
+
          final Thread t = new Thread() {
              @Override
              public void run() {
 
 
                  Integer num = 1;
+
                  while (num <= ide ){
                      progress.setProgress(num);
                      SystemClock.sleep(500);
-                     StringRequest stringRequest = new StringRequest(Request.Method.POST, Url+"?var='"+num+"'", new Response.Listener<String>() { //envia el id de la tabla de medidores.
+                     final StringRequest stringRequest = new StringRequest(Request.Method.POST, Url+"?var='"+num+"'", new Response.Listener<String>() { //envia el id de la tabla de medidores.
 
                          @Override
                          public void onResponse(String response) {
@@ -108,23 +111,23 @@
                              String marca =respuesta[1];
                              String id =respuesta[2];
                              crearTabla(numero,marca, id);
-
-
-
                          }
                      }, new Response.ErrorListener() {
                          @Override
                          public void onErrorResponse(VolleyError error) {
-                             Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();
+                             //Toast.makeText(getApplicationContext(), error.toString(), Toast.LENGTH_LONG).show();
+                             Toast.makeText(getApplicationContext(), "Error de conexión", Toast.LENGTH_LONG).show();
+
                          }
                      });
                      RequestQueue requestQueue = Volley.newRequestQueue(getApplicationContext());
                      requestQueue.add(stringRequest);
+                     
 
+                     //Toast.makeText(getApplicationContext(), stringRequest.toString(), Toast.LENGTH_LONG).show();
                      num = num + 1;
                  }
 
-
                  progress.dismiss();
                  descargarDatosCobros();
                  consultaIdCliente();
@@ -134,21 +137,7 @@
          t.start();
 
      }
-    public boolean verificarImportaciónMedidores(String id, String numero, String marca){
-        //Consulta en bbdd interna existencia de datos exportados.
-        DatabaseAccess databaseAccess = DatabaseAccess.getInstance(getApplicationContext());
-        databaseAccess.open();
-        String [] datos = databaseAccess.getDatosMedidores(id);
-        //compara datos obtenidos de la consulta con los obtenido de la bbdd externa.
-        if(!datos[0].equals(id) && !datos[1].equals(numero) && !datos[2].equals(marca)){
-            return false;
-        }else{
-            return true;
-        }
-        //si son iguales, conitunar con el bucle.
-        //si son distintos terminar con el bucle y borrar vaciar la tablas correspondientes.
-        //emitir error de inportación de medidores de datos,
-    }
+
 
      public void descargaLecturasAnteriores(){
          btImportar2.setEnabled(false);
